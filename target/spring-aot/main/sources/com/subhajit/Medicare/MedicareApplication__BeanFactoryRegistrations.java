package com.subhajit.Medicare;

import com.subhajit.Medicare.Config.AppConfig__BeanDefinitions;
import com.subhajit.Medicare.Config.CorsConfig__BeanDefinitions;
import com.subhajit.Medicare.Config.EmailConfig__BeanDefinitions;
import com.subhajit.Medicare.Config.SecurityConfig__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.Admin.Offer.OfferTypeController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.Admin.Product.ProductAdmin__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.Authentication.AuthController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.Authentication.PasswordController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.User.Cart.CartController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.User.Order.OrderController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.User.Order.PaymentController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.API.User.Product.ProductUser__BeanDefinitions;
import com.subhajit.Medicare.Controllers.TestController__BeanDefinitions;
import com.subhajit.Medicare.Controllers.UI.Home__BeanDefinitions;
import com.subhajit.Medicare.Exceptions.GlobalExceptionHandler__BeanDefinitions;
import com.subhajit.Medicare.Repository.AddressRepository__BeanDefinitions;
import com.subhajit.Medicare.Repository.CartRepository__BeanDefinitions;
import com.subhajit.Medicare.Repository.OfferTypeRepository__BeanDefinitions;
import com.subhajit.Medicare.Repository.OrderRepository__BeanDefinitions;
import com.subhajit.Medicare.Repository.ProductRepository__BeanDefinitions;
import com.subhajit.Medicare.Repository.RoleRepository__BeanDefinitions;
import com.subhajit.Medicare.Repository.UserRepository__BeanDefinitions;
import com.subhajit.Medicare.Security.AuthEntryPointJwt__BeanDefinitions;
import com.subhajit.Medicare.Security.AuthTokenFilter__BeanDefinitions;
import com.subhajit.Medicare.Security.JwtUtils__BeanDefinitions;
import com.subhajit.Medicare.Services.AuthService__BeanDefinitions;
import com.subhajit.Medicare.Services.Cart_Service__BeanDefinitions;
import com.subhajit.Medicare.Services.EmailService__BeanDefinitions;
import com.subhajit.Medicare.Services.LogoutService__BeanDefinitions;
import com.subhajit.Medicare.Services.MyDataService__BeanDefinitions;
import com.subhajit.Medicare.Services.OfferTypeService__BeanDefinitions;
import com.subhajit.Medicare.Services.OrderService__BeanDefinitions;
import com.subhajit.Medicare.Services.PasswordService__BeanDefinitions;
import com.subhajit.Medicare.Services.ProductService__BeanDefinitions;
import com.subhajit.Medicare.Services.SearchService__BeanDefinitions;
import com.subhajit.Medicare.Tokens.TokenRepository__BeanDefinitions;
import com.subhajit.Medicare.Utils.AppConstant__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocKotlinConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocPageableConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocSecurityConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocSortConfiguration__BeanDefinitions;
import org.springdoc.core.configuration.SpringDocUIConfiguration__BeanDefinitions;
import org.springdoc.core.properties.SpringDocConfigProperties__BeanDefinitions;
import org.springdoc.core.properties.SwaggerUiConfigParameters__BeanDefinitions;
import org.springdoc.core.properties.SwaggerUiConfigProperties__BeanDefinitions;
import org.springdoc.core.properties.SwaggerUiOAuthProperties__BeanDefinitions;
import org.springdoc.webmvc.core.configuration.SpringDocWebMvcConfiguration__BeanDefinitions;
import org.springdoc.webmvc.ui.SwaggerConfig__BeanDefinitions;
import org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator__BeanDefinitions;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.autoconfigure.AutoConfigurationPackages__BeanDefinitions;
import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.LifecycleProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryDependentConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.info.ProjectInfoProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.jackson.JacksonProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.mongo.MongoProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.SecurityProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.ssl.SslProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskExecutionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.task.TaskSchedulingProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations__BeanDefinitions;
import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.transaction.TransactionProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.ServerProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.WebProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.MultipartProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties__BeanDefinitions;
import org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration__BeanDefinitions;
import org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration__BeanDefinitions;
import org.springframework.boot.context.properties.BoundConfigurationProperties__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBinder__BeanDefinitions;
import org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor__BeanDefinitions;
import org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer__BeanDefinitions;
import org.springframework.boot.validation.beanvalidation.MethodValidationExcludeFilter__BeanDefinitions;
import org.springframework.boot.web.server.ErrorPageRegistrarBeanPostProcessor__BeanDefinitions;
import org.springframework.boot.web.server.WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions;
import org.springframework.context.event.DefaultEventListenerFactory__BeanDefinitions;
import org.springframework.context.event.EventListenerMethodProcessor__BeanDefinitions;
import org.springframework.data.mongodb.config.GeoJsonConfiguration__BeanDefinitions;
import org.springframework.data.repository.core.support.PropertiesBasedNamedQueries__BeanDefinitions;
import org.springframework.data.repository.core.support.RepositoryComposition__BeanDefinitions;
import org.springframework.data.web.config.ProjectingArgumentResolverRegistrar__BeanDefinitions;
import org.springframework.data.web.config.SpringDataJacksonConfiguration__BeanDefinitions;
import org.springframework.data.web.config.SpringDataWebConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.method.configuration.PrePostMethodSecurityConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration__BeanDefinitions;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration__BeanDefinitions;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport__BeanDefinitions;

/**
 * Register bean definitions for the bean factory.
 */
public class MedicareApplication__BeanFactoryRegistrations {
  /**
   * Register the bean definitions.
   */
  public void registerBeanDefinitions(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerProcessor", EventListenerMethodProcessor__BeanDefinitions.getInternalEventListenerProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.context.event.internalEventListenerFactory", DefaultEventListenerFactory__BeanDefinitions.getInternalEventListenerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("medicareApplication", MedicareApplication__BeanDefinitions.getMedicareApplicationBeanDefinition());
    beanFactory.registerBeanDefinition("appConfig", AppConfig__BeanDefinitions.getAppConfigBeanDefinition());
    beanFactory.registerBeanDefinition("corsConfig", CorsConfig__BeanDefinitions.getCorsConfigBeanDefinition());
    beanFactory.registerBeanDefinition("emailConfig", EmailConfig__BeanDefinitions.getEmailConfigBeanDefinition());
    beanFactory.registerBeanDefinition("securityConfig", SecurityConfig__BeanDefinitions.getSecurityConfigBeanDefinition());
    beanFactory.registerBeanDefinition("offerTypeController", OfferTypeController__BeanDefinitions.getOfferTypeControllerBeanDefinition());
    beanFactory.registerBeanDefinition("productAdmin", ProductAdmin__BeanDefinitions.getProductAdminBeanDefinition());
    beanFactory.registerBeanDefinition("authController", AuthController__BeanDefinitions.getAuthControllerBeanDefinition());
    beanFactory.registerBeanDefinition("passwordController", PasswordController__BeanDefinitions.getPasswordControllerBeanDefinition());
    beanFactory.registerBeanDefinition("cartController", CartController__BeanDefinitions.getCartControllerBeanDefinition());
    beanFactory.registerBeanDefinition("orderController", OrderController__BeanDefinitions.getOrderControllerBeanDefinition());
    beanFactory.registerBeanDefinition("paymentController", PaymentController__BeanDefinitions.getPaymentControllerBeanDefinition());
    beanFactory.registerBeanDefinition("productUser", ProductUser__BeanDefinitions.getProductUserBeanDefinition());
    beanFactory.registerBeanDefinition("testController", TestController__BeanDefinitions.getTestControllerBeanDefinition());
    beanFactory.registerBeanDefinition("home", Home__BeanDefinitions.getHomeBeanDefinition());
    beanFactory.registerBeanDefinition("globalExceptionHandler", GlobalExceptionHandler__BeanDefinitions.getGlobalExceptionHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("authEntryPointJwt", AuthEntryPointJwt__BeanDefinitions.getAuthEntryPointJwtBeanDefinition());
    beanFactory.registerBeanDefinition("authTokenFilter", AuthTokenFilter__BeanDefinitions.getAuthTokenFilterBeanDefinition());
    beanFactory.registerBeanDefinition("jwtUtils", JwtUtils__BeanDefinitions.getJwtUtilsBeanDefinition());
    beanFactory.registerBeanDefinition("authService", AuthService__BeanDefinitions.getAuthServiceBeanDefinition());
    beanFactory.registerBeanDefinition("cart_Service", Cart_Service__BeanDefinitions.getCartServiceBeanDefinition());
    beanFactory.registerBeanDefinition("emailService", EmailService__BeanDefinitions.getEmailServiceBeanDefinition());
    beanFactory.registerBeanDefinition("logoutService", LogoutService__BeanDefinitions.getLogoutServiceBeanDefinition());
    beanFactory.registerBeanDefinition("myDataService", MyDataService__BeanDefinitions.getMyDataServiceBeanDefinition());
    beanFactory.registerBeanDefinition("offerTypeService", OfferTypeService__BeanDefinitions.getOfferTypeServiceBeanDefinition());
    beanFactory.registerBeanDefinition("orderService", OrderService__BeanDefinitions.getOrderServiceBeanDefinition());
    beanFactory.registerBeanDefinition("passwordService", PasswordService__BeanDefinitions.getPasswordServiceBeanDefinition());
    beanFactory.registerBeanDefinition("productService", ProductService__BeanDefinitions.getProductServiceBeanDefinition());
    beanFactory.registerBeanDefinition("searchService", SearchService__BeanDefinitions.getSearchServiceBeanDefinition());
    beanFactory.registerBeanDefinition("appConstant", AppConstant__BeanDefinitions.getAppConstantBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplate", AppConfig__BeanDefinitions.getRestTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("userDetailsService", AppConfig__BeanDefinitions.getUserDetailsServiceBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationProvider", AppConfig__BeanDefinitions.getAuthenticationProviderBeanDefinition());
    beanFactory.registerBeanDefinition("passwordEncoder", AppConfig__BeanDefinitions.getPasswordEncoderBeanDefinition());
    beanFactory.registerBeanDefinition("getCorsConfiguration", CorsConfig__BeanDefinitions.getGetCorsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("getJavaMailSender", EmailConfig__BeanDefinitions.getGetJavaMailSenderBeanDefinition());
    beanFactory.registerBeanDefinition("factoryBean", EmailConfig__BeanDefinitions.getFactoryBeanBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.method.configuration.PrePostMethodSecurityConfiguration", PrePostMethodSecurityConfiguration__BeanDefinitions.getPrePostMethodSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("preFilterAuthorizationMethodInterceptor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPreFilterAuthorizationMethodInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("preAuthorizeAuthorizationMethodInterceptor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPreAuthorizeAuthorizationMethodInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("postAuthorizeAuthorizationMethodInterceptor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPostAuthorizeAuthorizationMethodInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("postFilterAuthorizationMethodInterceptor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPostFilterAuthorizationMethodInterceptorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.configuration.ObjectPostProcessorConfiguration", ObjectPostProcessorConfiguration__BeanDefinitions.getObjectPostProcessorConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("objectPostProcessor", ObjectPostProcessorConfiguration__BeanDefinitions.getObjectPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration", AuthenticationConfiguration__BeanDefinitions.getAuthenticationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationManagerBuilder", AuthenticationConfiguration__BeanDefinitions.getAuthenticationManagerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("enableGlobalAuthenticationAutowiredConfigurer", AuthenticationConfiguration__BeanDefinitions.getEnableGlobalAuthenticationAutowiredConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("initializeUserDetailsBeanManagerConfigurer", AuthenticationConfiguration__BeanDefinitions.getInitializeUserDetailsBeanManagerConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("initializeAuthenticationProviderBeanManagerConfigurer", AuthenticationConfiguration__BeanDefinitions.getInitializeAuthenticationProviderBeanManagerConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration", WebSecurityConfiguration__BeanDefinitions.getWebSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("delegatingApplicationListener", WebSecurityConfiguration__BeanDefinitions.getDelegatingApplicationListenerBeanDefinition());
    beanFactory.registerBeanDefinition("webSecurityExpressionHandler", WebSecurityConfiguration__BeanDefinitions.getWebSecurityExpressionHandlerBeanDefinition());
    beanFactory.registerBeanDefinition("springSecurityFilterChain", WebSecurityConfiguration__BeanDefinitions.getSpringSecurityFilterChainBeanDefinition());
    beanFactory.registerBeanDefinition("privilegeEvaluator", WebSecurityConfiguration__BeanDefinitions.getPrivilegeEvaluatorBeanDefinition());
    beanFactory.registerBeanDefinition("conversionServicePostProcessor", WebSecurityConfiguration__BeanDefinitions.getConversionServicePostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration", WebMvcSecurityConfiguration__BeanDefinitions.getWebMvcSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("requestDataValueProcessor", WebMvcSecurityConfiguration__BeanDefinitions.getRequestDataValueProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration", HttpSecurityConfiguration__BeanDefinitions.getHttpSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.httpSecurity", HttpSecurityConfiguration__BeanDefinitions.getHttpSecurityBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationManager", SecurityConfig__BeanDefinitions.getAuthenticationManagerBeanDefinition());
    beanFactory.registerBeanDefinition("filterChain", SecurityConfig__BeanDefinitions.getFilterChainBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.aop.config.internalAutoProxyCreator", InfrastructureAdvisorAutoProxyCreator__BeanDefinitions.getInternalAutoProxyCreatorBeanDefinition());
    beanFactory.registerBeanDefinition("preFilterAuthorizationAdvisor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPreFilterAuthorizationAdvisorBeanDefinition());
    beanFactory.registerBeanDefinition("preAuthorizeAuthorizationAdvisor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPreAuthorizeAuthorizationAdvisorBeanDefinition());
    beanFactory.registerBeanDefinition("postFilterAuthorizationAdvisor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPostFilterAuthorizationAdvisorBeanDefinition());
    beanFactory.registerBeanDefinition("postAuthorizeAuthorizationAdvisor", PrePostMethodSecurityConfiguration__BeanDefinitions.getPostAuthorizeAuthorizationAdvisorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.AutoConfigurationPackages", AutoConfigurationPackages__BeanDefinitions.BasePackages.getAutoConfigurationPackagesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertyPlaceholderAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("propertySourcesPlaceholderConfigurer", PropertyPlaceholderAutoConfiguration__BeanDefinitions.getPropertySourcesPlaceholderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration", SslAutoConfiguration__BeanDefinitions.getSslAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("sslPropertiesSslBundleRegistrar", SslAutoConfiguration__BeanDefinitions.getSslPropertiesSslBundleRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("sslBundleRegistry", SslAutoConfiguration__BeanDefinitions.getSslBundleRegistryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", ConfigurationPropertiesBindingPostProcessor__BeanDefinitions.getConfigurationPropertiesBindingPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.internalConfigurationPropertiesBinder", ConfigurationPropertiesBinder__BeanDefinitions.ConfigurationPropertiesBinderFactory.getInternalConfigurationPropertiesBinderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.BoundConfigurationProperties", BoundConfigurationProperties__BeanDefinitions.getBoundConfigurationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.context.properties.EnableConfigurationPropertiesRegistrar.methodValidationExcludeFilter", MethodValidationExcludeFilter__BeanDefinitions.getMethodValidationExcludeFilterBeanDefinition());
    beanFactory.registerBeanDefinition("spring.ssl-org.springframework.boot.autoconfigure.ssl.SslProperties", SslProperties__BeanDefinitions.getSslPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration$TomcatWebSocketConfiguration", WebSocketServletAutoConfiguration__BeanDefinitions.TomcatWebSocketConfiguration.getTomcatWebSocketConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("websocketServletWebServerCustomizer", WebSocketServletAutoConfiguration__BeanDefinitions.TomcatWebSocketConfiguration.getWebsocketServletWebServerCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration", WebSocketServletAutoConfiguration__BeanDefinitions.getWebSocketServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat", ServletWebServerFactoryConfiguration__BeanDefinitions.EmbeddedTomcat.getEmbeddedTomcatBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactory", ServletWebServerFactoryConfiguration__BeanDefinitions.EmbeddedTomcat.getTomcatServletWebServerFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getServletWebServerFactoryAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("servletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatServletWebServerFactoryCustomizer", ServletWebServerFactoryAutoConfiguration__BeanDefinitions.getTomcatServletWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("server-org.springframework.boot.autoconfigure.web.ServerProperties", ServerProperties__BeanDefinitions.getServerPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("webServerFactoryCustomizerBeanPostProcessor", WebServerFactoryCustomizerBeanPostProcessor__BeanDefinitions.getWebServerFactoryCustomizerBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageRegistrarBeanPostProcessor", ErrorPageRegistrarBeanPostProcessor__BeanDefinitions.getErrorPageRegistrarBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletConfiguration.getDispatcherServletConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServlet", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletConfiguration.getDispatcherServletBeanDefinition());
    beanFactory.registerBeanDefinition("spring.mvc-org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties", WebMvcProperties__BeanDefinitions.getWebMvcPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletRegistrationConfiguration.getDispatcherServletRegistrationConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("dispatcherServletRegistration", DispatcherServletAutoConfiguration__BeanDefinitions.DispatcherServletRegistrationConfiguration.getDispatcherServletRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration", DispatcherServletAutoConfiguration__BeanDefinitions.getDispatcherServletAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration", TaskExecutionAutoConfiguration__BeanDefinitions.getTaskExecutionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskExecutorBuilder", TaskExecutionAutoConfiguration__BeanDefinitions.getTaskExecutorBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("applicationTaskExecutor", TaskExecutionAutoConfiguration__BeanDefinitions.getApplicationTaskExecutorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.execution-org.springframework.boot.autoconfigure.task.TaskExecutionProperties", TaskExecutionProperties__BeanDefinitions.getTaskExecutionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.WhitelabelErrorViewConfiguration.getWhitelabelErrorViewConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("error", ErrorMvcAutoConfiguration__BeanDefinitions.WhitelabelErrorViewConfiguration.getErrorBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameViewResolver", ErrorMvcAutoConfiguration__BeanDefinitions.WhitelabelErrorViewConfiguration.getBeanNameViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$DefaultErrorViewResolverConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.DefaultErrorViewResolverConfiguration.getDefaultErrorViewResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("conventionErrorViewResolver", ErrorMvcAutoConfiguration__BeanDefinitions.DefaultErrorViewResolverConfiguration.getConventionErrorViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.web-org.springframework.boot.autoconfigure.web.WebProperties", WebProperties__BeanDefinitions.getWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("errorAttributes", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorAttributesBeanDefinition());
    beanFactory.registerBeanDefinition("basicErrorController", ErrorMvcAutoConfiguration__BeanDefinitions.getBasicErrorControllerBeanDefinition());
    beanFactory.registerBeanDefinition("errorPageCustomizer", ErrorMvcAutoConfiguration__BeanDefinitions.getErrorPageCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("preserveErrorControllerTargetClassPostProcessor", ErrorMvcAutoConfiguration__BeanDefinitions.getPreserveErrorControllerTargetClassPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$EnableWebMvcConfiguration", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getEnableWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerAdapter", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getRequestMappingHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("welcomePageHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getWelcomePageHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("welcomePageNotAcceptableHandlerMapping", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getWelcomePageNotAcceptableHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("localeResolver", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getLocaleResolverBeanDefinition());
    beanFactory.registerBeanDefinition("themeResolver", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getThemeResolverBeanDefinition());
    beanFactory.registerBeanDefinition("flashMapManager", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getFlashMapManagerBeanDefinition());
    beanFactory.registerBeanDefinition("mvcConversionService", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcConversionServiceBeanDefinition());
    beanFactory.registerBeanDefinition("mvcValidator", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcValidatorBeanDefinition());
    beanFactory.registerBeanDefinition("mvcContentNegotiationManager", WebMvcAutoConfiguration__BeanDefinitions.EnableWebMvcConfiguration.getMvcContentNegotiationManagerBeanDefinition());
    beanFactory.registerBeanDefinition("requestMappingHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getRequestMappingHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPatternParser", WebMvcConfigurationSupport__BeanDefinitions.getMvcPatternParserBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUrlPathHelper", WebMvcConfigurationSupport__BeanDefinitions.getMvcUrlPathHelperBeanDefinition());
    beanFactory.registerBeanDefinition("mvcPathMatcher", WebMvcConfigurationSupport__BeanDefinitions.getMvcPathMatcherBeanDefinition());
    beanFactory.registerBeanDefinition("viewControllerHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getViewControllerHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("beanNameHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getBeanNameHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("routerFunctionMapping", WebMvcConfigurationSupport__BeanDefinitions.getRouterFunctionMappingBeanDefinition());
    beanFactory.registerBeanDefinition("resourceHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getResourceHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("mvcResourceUrlProvider", WebMvcConfigurationSupport__BeanDefinitions.getMvcResourceUrlProviderBeanDefinition());
    beanFactory.registerBeanDefinition("defaultServletHandlerMapping", WebMvcConfigurationSupport__BeanDefinitions.getDefaultServletHandlerMappingBeanDefinition());
    beanFactory.registerBeanDefinition("handlerFunctionAdapter", WebMvcConfigurationSupport__BeanDefinitions.getHandlerFunctionAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("mvcUriComponentsContributor", WebMvcConfigurationSupport__BeanDefinitions.getMvcUriComponentsContributorBeanDefinition());
    beanFactory.registerBeanDefinition("httpRequestHandlerAdapter", WebMvcConfigurationSupport__BeanDefinitions.getHttpRequestHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("simpleControllerHandlerAdapter", WebMvcConfigurationSupport__BeanDefinitions.getSimpleControllerHandlerAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("handlerExceptionResolver", WebMvcConfigurationSupport__BeanDefinitions.getHandlerExceptionResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcViewResolver", WebMvcConfigurationSupport__BeanDefinitions.getMvcViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("mvcHandlerMappingIntrospector", WebMvcConfigurationSupport__BeanDefinitions.getMvcHandlerMappingIntrospectorBeanDefinition());
    beanFactory.registerBeanDefinition("viewNameTranslator", WebMvcConfigurationSupport__BeanDefinitions.getViewNameTranslatorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getWebMvcAutoConfigurationAdapterBeanDefinition());
    beanFactory.registerBeanDefinition("defaultViewResolver", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getDefaultViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("viewResolver", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("requestContextFilter", WebMvcAutoConfiguration__BeanDefinitions.WebMvcAutoConfigurationAdapter.getRequestContextFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration", WebMvcAutoConfiguration__BeanDefinitions.getWebMvcAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("formContentFilter", WebMvcAutoConfiguration__BeanDefinitions.getFormContentFilterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$OpenApiResourceAdvice", SpringDocConfiguration__BeanDefinitions.OpenApiResourceAdvice.getOpenApiResourceAdviceBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$SpringDocSpringDataWebPropertiesProvider", SpringDocConfiguration__BeanDefinitions.SpringDocSpringDataWebPropertiesProvider.getSpringDocSpringDataWebPropertiesProviderBeanDefinition());
    beanFactory.registerBeanDefinition("springDataWebPropertiesProvider", SpringDocConfiguration__BeanDefinitions.SpringDocSpringDataWebPropertiesProvider.getSpringDataWebPropertiesProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration$WebConversionServiceConfiguration", SpringDocConfiguration__BeanDefinitions.WebConversionServiceConfiguration.getWebConversionServiceConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("webConversionServiceProvider", SpringDocConfiguration__BeanDefinitions.WebConversionServiceConfiguration.getWebConversionServiceProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocConfiguration", SpringDocConfiguration__BeanDefinitions.getSpringDocConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("localSpringDocParameterNameDiscoverer", SpringDocConfiguration__BeanDefinitions.getLocalSpringDocParameterNameDiscovererBeanDefinition());
    beanFactory.registerBeanDefinition("additionalModelsConverter", SpringDocConfiguration__BeanDefinitions.getAdditionalModelsConverterBeanDefinition());
    beanFactory.registerBeanDefinition("fileSupportConverter", SpringDocConfiguration__BeanDefinitions.getFileSupportConverterBeanDefinition());
    beanFactory.registerBeanDefinition("responseSupportConverter", SpringDocConfiguration__BeanDefinitions.getResponseSupportConverterBeanDefinition());
    beanFactory.registerBeanDefinition("schemaPropertyDeprecatingConverter", SpringDocConfiguration__BeanDefinitions.getSchemaPropertyDeprecatingConverterBeanDefinition());
    beanFactory.registerBeanDefinition("polymorphicModelConverter", SpringDocConfiguration__BeanDefinitions.getPolymorphicModelConverterBeanDefinition());
    beanFactory.registerBeanDefinition("openAPIBuilder", SpringDocConfiguration__BeanDefinitions.getOpenAPIBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("modelConverterRegistrar", SpringDocConfiguration__BeanDefinitions.getModelConverterRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("operationBuilder", SpringDocConfiguration__BeanDefinitions.getOperationBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("propertyResolverUtils", SpringDocConfiguration__BeanDefinitions.getPropertyResolverUtilsBeanDefinition());
    beanFactory.registerBeanDefinition("requestBodyBuilder", SpringDocConfiguration__BeanDefinitions.getRequestBodyBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("securityParser", SpringDocConfiguration__BeanDefinitions.getSecurityParserBeanDefinition());
    beanFactory.registerBeanDefinition("genericReturnTypeParser", SpringDocConfiguration__BeanDefinitions.getGenericReturnTypeParserBeanDefinition());
    beanFactory.registerBeanDefinition("parameterBuilder", SpringDocConfiguration__BeanDefinitions.getParameterBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("springDocProviders", SpringDocConfiguration__BeanDefinitions.getSpringDocProvidersBeanDefinition());
    beanFactory.registerBeanDefinition("objectMapperProvider", SpringDocConfiguration__BeanDefinitions.getObjectMapperProviderBeanDefinition());
    beanFactory.registerBeanDefinition("springDocCustomizers", SpringDocConfiguration__BeanDefinitions.getSpringDocCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocKotlinConfiguration", SpringDocKotlinConfiguration__BeanDefinitions.getSpringDocKotlinConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("kotlinCoroutinesReturnTypeParser", SpringDocKotlinConfiguration__BeanDefinitions.getKotlinCoroutinesReturnTypeParserBeanDefinition());
    beanFactory.registerBeanDefinition("nullableKotlinRequestParameterCustomizer", SpringDocKotlinConfiguration__BeanDefinitions.getNullableKotlinRequestParameterCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocPageableConfiguration", SpringDocPageableConfiguration__BeanDefinitions.getSpringDocPageableConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableOpenAPIConverter", SpringDocPageableConfiguration__BeanDefinitions.getPageableOpenAPIConverterBeanDefinition());
    beanFactory.registerBeanDefinition("delegatingMethodParameterCustomizer", SpringDocPageableConfiguration__BeanDefinitions.getDelegatingMethodParameterCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocSecurityConfiguration$SpringSecurityLoginEndpointConfiguration", SpringDocSecurityConfiguration__BeanDefinitions.SpringSecurityLoginEndpointConfiguration.getSpringSecurityLoginEndpointConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocSecurityConfiguration", SpringDocSecurityConfiguration__BeanDefinitions.getSpringDocSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocSortConfiguration", SpringDocSortConfiguration__BeanDefinitions.getSpringDocSortConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("sortOpenAPIConverter", SpringDocSortConfiguration__BeanDefinitions.getSortOpenAPIConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.configuration.SpringDocUIConfiguration", SpringDocUIConfiguration__BeanDefinitions.getSpringDocUIConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SpringDocConfigProperties", SpringDocConfigProperties__BeanDefinitions.getSpringDocConfigPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SwaggerUiConfigParameters", SwaggerUiConfigParameters__BeanDefinitions.getSwaggerUiConfigParametersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SwaggerUiConfigProperties", SwaggerUiConfigProperties__BeanDefinitions.getSwaggerUiConfigPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.core.properties.SwaggerUiOAuthProperties", SwaggerUiOAuthProperties__BeanDefinitions.getSwaggerUiOAuthPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.webmvc.core.configuration.SpringDocWebMvcConfiguration$SpringDocWebMvcRouterConfiguration", SpringDocWebMvcConfiguration__BeanDefinitions.SpringDocWebMvcRouterConfiguration.getSpringDocWebMvcRouterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("routerFunctionProvider", SpringDocWebMvcConfiguration__BeanDefinitions.SpringDocWebMvcRouterConfiguration.getRouterFunctionProviderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.webmvc.core.configuration.SpringDocWebMvcConfiguration", SpringDocWebMvcConfiguration__BeanDefinitions.getSpringDocWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("openApiResource", SpringDocWebMvcConfiguration__BeanDefinitions.getOpenApiResourceBeanDefinition());
    beanFactory.registerBeanDefinition("requestBuilder", SpringDocWebMvcConfiguration__BeanDefinitions.getRequestBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("springWebProvider", SpringDocWebMvcConfiguration__BeanDefinitions.getSpringWebProviderBeanDefinition());
    beanFactory.registerBeanDefinition("responseBuilder", SpringDocWebMvcConfiguration__BeanDefinitions.getResponseBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springdoc.webmvc.ui.SwaggerConfig", SwaggerConfig__BeanDefinitions.getSwaggerConfigBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerWelcome", SwaggerConfig__BeanDefinitions.getSwaggerWelcomeBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerConfigResource", SwaggerConfig__BeanDefinitions.getSwaggerConfigResourceBeanDefinition());
    beanFactory.registerBeanDefinition("indexPageTransformer", SwaggerConfig__BeanDefinitions.getIndexPageTransformerBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerWebMvcConfigurer", SwaggerConfig__BeanDefinitions.getSwaggerWebMvcConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("swaggerResourceResolver", SwaggerConfig__BeanDefinitions.getSwaggerResourceResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration$ClassProxyingConfiguration", AopAutoConfiguration__BeanDefinitions.ClassProxyingConfiguration.getClassProxyingConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("forceAutoProxyCreatorToUseClassProxying", AopAutoConfiguration__BeanDefinitions.ClassProxyingConfiguration.getForceAutoProxyCreatorToUseClassProxyingBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.aop.AopAutoConfiguration", AopAutoConfiguration__BeanDefinitions.getAopAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("applicationAvailability", ApplicationAvailabilityAutoConfiguration__BeanDefinitions.getApplicationAvailabilityBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration", JacksonAutoConfiguration__BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration.getJacksonObjectMapperBuilderCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("standardJacksonObjectMapperBuilderCustomizer", JacksonAutoConfiguration__BeanDefinitions.Jackson2ObjectMapperBuilderCustomizerConfiguration.getStandardJacksonObjectMapperBuilderCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties", JacksonProperties__BeanDefinitions.getJacksonPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperBuilderConfiguration.getJacksonObjectMapperBuilderConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapperBuilder", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperBuilderConfiguration.getJacksonObjectMapperBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$ParameterNamesModuleConfiguration", JacksonAutoConfiguration__BeanDefinitions.ParameterNamesModuleConfiguration.getParameterNamesModuleConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("parameterNamesModule", JacksonAutoConfiguration__BeanDefinitions.ParameterNamesModuleConfiguration.getParameterNamesModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperConfiguration.getJacksonObjectMapperConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonObjectMapper", JacksonAutoConfiguration__BeanDefinitions.JacksonObjectMapperConfiguration.getJacksonObjectMapperBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonMixinConfiguration", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJacksonMixinConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModuleEntries", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJsonMixinModuleEntriesBeanDefinition());
    beanFactory.registerBeanDefinition("jsonMixinModule", JacksonAutoConfiguration__BeanDefinitions.JacksonMixinConfiguration.getJsonMixinModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration", JacksonAutoConfiguration__BeanDefinitions.getJacksonAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jsonComponentModule", JacksonAutoConfiguration__BeanDefinitions.getJsonComponentModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration", ConfigurationPropertiesAutoConfiguration__BeanDefinitions.getConfigurationPropertiesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("lifecycleProcessor", LifecycleAutoConfiguration__BeanDefinitions.getLifecycleProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("spring.lifecycle-org.springframework.boot.autoconfigure.context.LifecycleProperties", LifecycleProperties__BeanDefinitions.getLifecyclePropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("persistenceExceptionTranslationPostProcessor", PersistenceExceptionTranslationAutoConfiguration__BeanDefinitions.getPersistenceExceptionTranslationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration$MongoClientSettingsConfiguration", MongoAutoConfiguration__BeanDefinitions.MongoClientSettingsConfiguration.getMongoClientSettingsConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mongoClientSettings", MongoAutoConfiguration__BeanDefinitions.MongoClientSettingsConfiguration.getMongoClientSettingsBeanDefinition());
    beanFactory.registerBeanDefinition("standardMongoSettingsCustomizer", MongoAutoConfiguration__BeanDefinitions.MongoClientSettingsConfiguration.getStandardMongoSettingsCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration", MongoAutoConfiguration__BeanDefinitions.getMongoAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mongoConnectionDetails", MongoAutoConfiguration__BeanDefinitions.getMongoConnectionDetailsBeanDefinition());
    beanFactory.registerBeanDefinition("mongo", MongoAutoConfiguration__BeanDefinitions.getMongoBeanDefinition());
    beanFactory.registerBeanDefinition("spring.data.mongodb-org.springframework.boot.autoconfigure.mongo.MongoProperties", MongoProperties__BeanDefinitions.getMongoPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.mongo.MongoDataConfiguration", MongoDataConfiguration__BeanDefinitions.getMongoDataConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mongoManagedTypes", MongoDataConfiguration__BeanDefinitions.getMongoManagedTypesBeanDefinition());
    beanFactory.registerBeanDefinition("mongoMappingContext", MongoDataConfiguration__BeanDefinitions.getMongoMappingContextBeanDefinition());
    beanFactory.registerBeanDefinition("mongoCustomConversions", MongoDataConfiguration__BeanDefinitions.getMongoCustomConversionsBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryConfiguration", MongoDatabaseFactoryConfiguration__BeanDefinitions.getMongoDatabaseFactoryConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mongoDatabaseFactory", MongoDatabaseFactoryConfiguration__BeanDefinitions.getMongoDatabaseFactoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.mongo.MongoDatabaseFactoryDependentConfiguration", MongoDatabaseFactoryDependentConfiguration__BeanDefinitions.getMongoDatabaseFactoryDependentConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mongoTemplate", MongoDatabaseFactoryDependentConfiguration__BeanDefinitions.getMongoTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("mappingMongoConverter", MongoDatabaseFactoryDependentConfiguration__BeanDefinitions.getMappingMongoConverterBeanDefinition());
    beanFactory.registerBeanDefinition("gridFsTemplate", MongoDatabaseFactoryDependentConfiguration__BeanDefinitions.getGridFsTemplateBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration", MongoDataAutoConfiguration__BeanDefinitions.getMongoDataAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration", MongoRepositoriesAutoConfiguration__BeanDefinitions.getMongoRepositoriesAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#0", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition());
    beanFactory.registerBeanDefinition("mongodb.UserRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition());
    beanFactory.registerBeanDefinition("userRepository", UserRepository__BeanDefinitions.getUserRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#1", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition1());
    beanFactory.registerBeanDefinition("mongodb.RoleRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition1());
    beanFactory.registerBeanDefinition("roleRepository", RoleRepository__BeanDefinitions.getRoleRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#2", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition2());
    beanFactory.registerBeanDefinition("mongodb.TokenRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition2());
    beanFactory.registerBeanDefinition("tokenRepository", TokenRepository__BeanDefinitions.getTokenRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#3", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition3());
    beanFactory.registerBeanDefinition("mongodb.CartRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition3());
    beanFactory.registerBeanDefinition("cartRepository", CartRepository__BeanDefinitions.getCartRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#4", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition4());
    beanFactory.registerBeanDefinition("mongodb.OfferTypeRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition4());
    beanFactory.registerBeanDefinition("offerTypeRepository", OfferTypeRepository__BeanDefinitions.getOfferTypeRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#5", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition5());
    beanFactory.registerBeanDefinition("mongodb.OrderRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition5());
    beanFactory.registerBeanDefinition("orderRepository", OrderRepository__BeanDefinitions.getOrderRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#6", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition6());
    beanFactory.registerBeanDefinition("mongodb.AddressRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition6());
    beanFactory.registerBeanDefinition("addressRepository", AddressRepository__BeanDefinitions.getAddressRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("mongo.named-queries#7", PropertiesBasedNamedQueries__BeanDefinitions.getNamedqueriesBeanDefinition7());
    beanFactory.registerBeanDefinition("mongodb.ProductRepository.fragments#0", RepositoryComposition__BeanDefinitions.RepositoryFragments.getFragmentsBeanDefinition7());
    beanFactory.registerBeanDefinition("productRepository", ProductRepository__BeanDefinitions.getProductRepositoryBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.StringHttpMessageConverterConfiguration.getStringHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("stringHttpMessageConverter", HttpMessageConvertersAutoConfiguration__BeanDefinitions.StringHttpMessageConverterConfiguration.getStringHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration.getMappingJacksonHttpMessageConverterConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("mappingJackson2HttpMessageConverter", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.MappingJackson2HttpMessageConverterConfiguration.getMappingJacksonHttpMessageConverterBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.JacksonHttpMessageConvertersConfiguration", JacksonHttpMessageConvertersConfiguration__BeanDefinitions.getJacksonHttpMessageConvertersConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getHttpMessageConvertersAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("messageConverters", HttpMessageConvertersAutoConfiguration__BeanDefinitions.getMessageConvertersBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.ProjectingArgumentResolverRegistrar", ProjectingArgumentResolverRegistrar__BeanDefinitions.getProjectingArgumentResolverRegistrarBeanDefinition());
    beanFactory.registerBeanDefinition("projectingArgumentResolverBeanPostProcessor", ProjectingArgumentResolverRegistrar__BeanDefinitions.getProjectingArgumentResolverBeanPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.SpringDataWebConfiguration", SpringDataWebConfiguration__BeanDefinitions.getSpringDataWebConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableResolver", SpringDataWebConfiguration__BeanDefinitions.getPageableResolverBeanDefinition());
    beanFactory.registerBeanDefinition("sortResolver", SpringDataWebConfiguration__BeanDefinitions.getSortResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.mongodb.config.GeoJsonConfiguration", GeoJsonConfiguration__BeanDefinitions.getGeoJsonConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("geoJsonModule", GeoJsonConfiguration__BeanDefinitions.getGeoJsonModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.data.web.config.SpringDataJacksonConfiguration", SpringDataJacksonConfiguration__BeanDefinitions.getSpringDataJacksonConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("jacksonGeoModule", SpringDataJacksonConfiguration__BeanDefinitions.getJacksonGeoModuleBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration", SpringDataWebAutoConfiguration__BeanDefinitions.getSpringDataWebAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("pageableCustomizer", SpringDataWebAutoConfiguration__BeanDefinitions.getPageableCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("sortCustomizer", SpringDataWebAutoConfiguration__BeanDefinitions.getSortCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("spring.data.web-org.springframework.boot.autoconfigure.data.web.SpringDataWebProperties", SpringDataWebProperties__BeanDefinitions.getSpringDataWebPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.freemarker.FreeMarkerServletWebConfiguration", FreeMarkerServletWebConfiguration__BeanDefinitions.getFreeMarkerServletWebConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("freeMarkerConfigurer", FreeMarkerServletWebConfiguration__BeanDefinitions.getFreeMarkerConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("freeMarkerConfiguration", FreeMarkerServletWebConfiguration__BeanDefinitions.getFreeMarkerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("freeMarkerViewResolver", FreeMarkerServletWebConfiguration__BeanDefinitions.getFreeMarkerViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration", FreeMarkerAutoConfiguration__BeanDefinitions.getFreeMarkerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.freemarker-org.springframework.boot.autoconfigure.freemarker.FreeMarkerProperties", FreeMarkerProperties__BeanDefinitions.getFreeMarkerPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration", ProjectInfoAutoConfiguration__BeanDefinitions.getProjectInfoAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties", ProjectInfoProperties__BeanDefinitions.getProjectInfoPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.security.servlet.SpringBootWebSecurityConfiguration", SpringBootWebSecurityConfiguration__BeanDefinitions.getSpringBootWebSecurityConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration", SecurityAutoConfiguration__BeanDefinitions.getSecurityAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("authenticationEventPublisher", SecurityAutoConfiguration__BeanDefinitions.getAuthenticationEventPublisherBeanDefinition());
    beanFactory.registerBeanDefinition("spring.security-org.springframework.boot.autoconfigure.security.SecurityProperties", SecurityProperties__BeanDefinitions.getSecurityPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration", SecurityFilterAutoConfiguration__BeanDefinitions.getSecurityFilterAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("securityFilterChainRegistration", SecurityFilterAutoConfiguration__BeanDefinitions.getSecurityFilterChainRegistrationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration", SqlInitializationAutoConfiguration__BeanDefinitions.getSqlInitializationAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.sql.init-org.springframework.boot.autoconfigure.sql.init.SqlInitializationProperties", SqlInitializationProperties__BeanDefinitions.getSqlInitializationPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.sql.init.dependency.DatabaseInitializationDependencyConfigurer$DependsOnDatabaseInitializationPostProcessor", DatabaseInitializationDependencyConfigurer__BeanDefinitions.DependsOnDatabaseInitializationPostProcessor.getDependsOnDatabaseInitializationPostProcessorBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration", TaskSchedulingAutoConfiguration__BeanDefinitions.getTaskSchedulingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("taskSchedulerBuilder", TaskSchedulingAutoConfiguration__BeanDefinitions.getTaskSchedulerBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("spring.task.scheduling-org.springframework.boot.autoconfigure.task.TaskSchedulingProperties", TaskSchedulingProperties__BeanDefinitions.getTaskSchedulingPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration$ThymeleafViewResolverConfiguration", ThymeleafAutoConfiguration__BeanDefinitions.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration.getThymeleafViewResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("thymeleafViewResolver", ThymeleafAutoConfiguration__BeanDefinitions.ThymeleafWebMvcConfiguration.ThymeleafViewResolverConfiguration.getThymeleafViewResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$ThymeleafWebMvcConfiguration", ThymeleafAutoConfiguration__BeanDefinitions.ThymeleafWebMvcConfiguration.getThymeleafWebMvcConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration$DefaultTemplateResolverConfiguration", ThymeleafAutoConfiguration__BeanDefinitions.DefaultTemplateResolverConfiguration.getDefaultTemplateResolverConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("defaultTemplateResolver", ThymeleafAutoConfiguration__BeanDefinitions.DefaultTemplateResolverConfiguration.getDefaultTemplateResolverBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.TemplateEngineConfigurations$DefaultTemplateEngineConfiguration", TemplateEngineConfigurations__BeanDefinitions.DefaultTemplateEngineConfiguration.getDefaultTemplateEngineConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("templateEngine", TemplateEngineConfigurations__BeanDefinitions.DefaultTemplateEngineConfiguration.getTemplateEngineBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration", ThymeleafAutoConfiguration__BeanDefinitions.getThymeleafAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("spring.thymeleaf-org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties", ThymeleafProperties__BeanDefinitions.getThymeleafPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration", TransactionAutoConfiguration__BeanDefinitions.getTransactionAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("platformTransactionManagerCustomizers", TransactionAutoConfiguration__BeanDefinitions.getPlatformTransactionManagerCustomizersBeanDefinition());
    beanFactory.registerBeanDefinition("spring.transaction-org.springframework.boot.autoconfigure.transaction.TransactionProperties", TransactionProperties__BeanDefinitions.getTransactionPropertiesBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilderConfigurer", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderConfigurerBeanDefinition());
    beanFactory.registerBeanDefinition("restTemplateBuilder", RestTemplateAutoConfiguration__BeanDefinitions.getRestTemplateBuilderBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration$TomcatWebServerFactoryCustomizerConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration.getTomcatWebServerFactoryCustomizerConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("tomcatWebServerFactoryCustomizer", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.TomcatWebServerFactoryCustomizerConfiguration.getTomcatWebServerFactoryCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration", EmbeddedWebServerFactoryCustomizerAutoConfiguration__BeanDefinitions.getEmbeddedWebServerFactoryCustomizerAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration", HttpEncodingAutoConfiguration__BeanDefinitions.getHttpEncodingAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("characterEncodingFilter", HttpEncodingAutoConfiguration__BeanDefinitions.getCharacterEncodingFilterBeanDefinition());
    beanFactory.registerBeanDefinition("localeCharsetMappingsCustomizer", HttpEncodingAutoConfiguration__BeanDefinitions.getLocaleCharsetMappingsCustomizerBeanDefinition());
    beanFactory.registerBeanDefinition("org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration", MultipartAutoConfiguration__BeanDefinitions.getMultipartAutoConfigurationBeanDefinition());
    beanFactory.registerBeanDefinition("multipartConfigElement", MultipartAutoConfiguration__BeanDefinitions.getMultipartConfigElementBeanDefinition());
    beanFactory.registerBeanDefinition("multipartResolver", MultipartAutoConfiguration__BeanDefinitions.getMultipartResolverBeanDefinition());
    beanFactory.registerBeanDefinition("spring.servlet.multipart-org.springframework.boot.autoconfigure.web.servlet.MultipartProperties", MultipartProperties__BeanDefinitions.getMultipartPropertiesBeanDefinition());
  }

  /**
   * Register the aliases.
   */
  public void registerAliases(DefaultListableBeanFactory beanFactory) {
    beanFactory.registerAlias("applicationTaskExecutor", "taskExecutor");
  }
}
